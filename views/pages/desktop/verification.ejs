<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="styles.css" rel="stylesheet">
    <title>Verifica</title>
</head>

<body onload="checkAllInputs(), focusOnInput1()">
    <form method="post" action="/verification">
        <div class="title">Verification Code</div>
        <p class="message">We have sent a verification code to<br><%= emailToVerify %>
        </p>
        <div class="inputs">
            <input id="input1" name="input1" type="text" maxlength="1" oninput="handleInput(this, 'input2') "
                onkeydown="moveToPrevInput(event, this, 'input1')" onkeypress="validateInput(event)">
            <input id="input2" name="input2" type="text" maxlength="1" oninput="handleInput(this, 'input3')"
                onkeydown="moveToPrevInput(event, this, 'input1')" onkeypress="validateInput(event)">
            <input id="input3" name="input3" type="text" maxlength="1" oninput="handleInput(this, 'input4')"
                onkeydown="moveToPrevInput(event, this, 'input2')" onkeypress="validateInput(event)">
            <input id="input4" name="input4" type="text" maxlength="1" oninput="handleInput(this, 'input5')"
                onkeydown="moveToPrevInput(event, this, 'input3')" onkeypress="validateInput(event)">
            <input id="input5" name="input5" type="text" maxlength="1" oninput="handleInput(this, 'input6')"
                onkeydown="moveToPrevInput(event, this, 'input4')" onkeypress="validateInput(event)">
            <input id="input6" name="input6" type="text" maxlength="1" oninput="handleInput(this, 'input6')"
                onkeydown="moveToPrevInput(event, this, 'input5')" onkeypress="validateInput(event)">
        </div>
        <button type="submit" class="button-submit" id="verifyButton">Verify</button>
    </form>
</body>

<script>
    function handleInput(currentInput, nextInputId) {
        const maxLength = parseInt(currentInput.getAttribute('maxlength'));
        let inputValue = currentInput.value;

        currentInput.value = inputValue.toUpperCase();

        

        if (inputValue.length === maxLength) {
            const nextInput = document.getElementById(nextInputId);
            if (nextInput) {
                nextInput.focus();
            }
        }


        // Se l'utente ha incollato del testo, distribuisci i caratteri agli input successivi
        if (inputValue.length > 1 && nextInputId) {
            for (let i = 0; i < inputValue.length - 1; i++) {
                const nextInput = document.getElementById(nextInputId);
                if (nextInput) {
                    nextInput.value = inputValue[i].toUpperCase();
                    nextInputId = getNextInputId(nextInputId);
                }
            }
        }
        checkAllInputs();
    }

    function validateInput(event) {
        const char = String.fromCharCode(event.which);
        const isValidChar = /^[a-zA-Z0-9]$/.test(char);
        if (!isValidChar) {
            event.preventDefault();
        }
    }

    function checkAllInputs() {
        const inputs = document.querySelectorAll('.inputs input');
        const verifyButton = document.getElementById('verifyButton');
        const isAnyInputEmpty = Array.from(inputs).some(input => input.value.trim() === '');

        if (isAnyInputEmpty) {
            verifyButton.classList.add('disabled');
            verifyButton.disabled = true;
        } else {
            verifyButton.disabled = false;
            verifyButton.classList.remove('disabled');
            verifyButton
        }
    }

    function focusOnInput1() {
        const input1 = document.getElementById('input1');
        if (input1) {
            input1.focus();
        }
    }

    function getNextInputId(currentInputId) {
        const index = parseInt(currentInputId.charAt(currentInputId.length - 1));
        return index < 6 ? 'input' + (index + 1) : '';
    }

    function moveToPrevInput(event, currentInput, prevInputId) {
        if (event.key === 'Backspace' && currentInput.value === '' && prevInputId) {
            const prevInput = document.getElementById(prevInputId);
            if (prevInput) {
                prevInput.focus();
            }
        } else if (event.key.length === 1 && currentInput.value !== '' && nextInputId) {
            const nextInput = document.getElementById(nextInputId);
            if (nextInput) {
                nextInput.focus();
            }
        }
    }

    document.addEventListener('keydown', function (e) {
        if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z' || e.key === 'y' || e.key === 'Y')) {
            e.preventDefault();
        }
    });
</script>

<style>
    body {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 90vh;
    }

    .form {
        height: 400px;
        width: 370px;
    }

    .inputs input {
        font-weight: bold;
        width: 32px;
        height: 32px;
        text-align: center;
        font-size: 20px;
    }

    .inputs input:focus {
        border-bottom: 1.5px solid #006fbd;
        outline: none;
    }

    .disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
</style>

</html>